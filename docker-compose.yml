services:  
  
  open-webui:
    image: ghcr.io/open-webui/open-webui
    container_name: open-webui
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      - 3000:8080
    environment:
      - WEBUI_AUTH=False
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - RAG_WEB_SEARCH_ENGINE=searxng
      - SEARXNG_QUERY_URL=http://host.docker.internal:8080/search?q=<query>
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - postgres

  # ollama:
  #   image: ollama/ollama
  #   container_name: ollama
  #   ports:
  #     - 11434:11434
  #   volumes:
  #     - ollama:/root/.ollama
  #   # deploy:
  #   #   resources:
  #   #     reservations:
  #   #       devices:
  #   #         - driver: nvidia
  #   #           count: all
  #   #           capabilities: [gpu]
    

  
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready","-U", "postgres"]
    restart: always
  
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    ports:
      - 8080:8080
    volumes:
      - ./searxng:/etc/searxng

  jupyter:
    image: generative-ai-jupyter-cpu
    build: 
      context: ./jupyter
      args:
        - PROCESSOR=cpu
    ports: 
      - 8888:8888
    volumes:
      - ./data:/workspace/data
      - ./jupyter/notebooks/:/workspace/notebooks/
      - ./.env:/workspace/.env
      - ~/.cache/:/root/.cache/

  # opensearch: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
  #   image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
  #   environment:
  #     # - OPENSEARCH_INITIAL_ADMIN_PASSWORD=El@sticSearch123
  #     - DISABLE_SECURITY_PLUGIN=true
  #     - DISABLE_INSTALL_DEMO_CONFIG=true
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true # Disable JVM heap memory swapping
  #     - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx1g" # Set min and max JVM heap sizes to at least 50% of system RAM
  #   ulimits:
  #     memlock:
  #       soft: -1 # Set memlock to unlimited (no soft or hard limit)
  #       hard: -1
  #     nofile:
  #       soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
  #       hard: 65536
  #   volumes:
  #     - opensearch-data:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
  #   ports:
  #     - 9200:9200 # REST API
  #     - 9600:9600 # Performance Analyzer
  # opensearch-dashboards:
  #   image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
  #   ports:
  #     - 5601:5601 # Map host port 5601 to container port 5601
  #   expose:
  #     - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
  #   environment:
  #     OPENSEARCH_HOSTS: '["http://opensearch:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
  #     DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
  
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0 #7.17.16
  #   restart: always
  #   environment:
  #     - xpack.security.enabled=false
  #     - discovery.type=single-node
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.12.0 #7.17.16
  #   restart: always
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200    # address of elasticsearch docker container which kibana will connect
  #   ports:
  #     - 5601:5601
  #   depends_on:
  #     - elasticsearch                                   # kibana will start when elasticsearch has started

volumes:
  open-webui:
  postgres-db:
  # elasticsearch-data:
  opensearch-data:
  